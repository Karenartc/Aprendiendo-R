X <- 2
#Para ver el valor asignado
X
print(X)
#Para borrar variables
rm(X)
X
#primeros pasos
4*5
log(4)
#primeros pasos
4*5
2^3
exp(-5)
log(4)
4*5; 2^3; exp(-5); log(4)
4*5; 2^3; exp(-5); log(4)
#Ejercicios
#50+4*5-3raízde8
20+4*5-8^(1/3)
#Ejercicios
#50+4*5-3raízde8
20+4*5-8^(1/3)
#20/3 + pi/2raízde7
20/3 + pi/sqrt(7)
#logbase5(25)+e^-2
log(25,5)+exp(-2)
#vector numérico
c(1, 20, 13, 25, 22, 7)
#vector cadena de texto
c("paga", "fuga", "deudor")
#vector lógico
c(FALSE, FALSE, TRUE, FALSE, TRUE)
#los vectores deben ser del mismo tipo
#veamos que sucede si no sucede
c(1, 4, 8, 10, "fuga")
matrix(c(2, 4, 6, 8), nrow=2, ncol=2)
matrix(c(2, 4, 6, 8, 3), nrow=2, ncol=2)
matrix(c(2, 4, 6, 8), byrow=T, ncol=2)
matrix(c(2, 4, 6, 8, 3), byrow=T, ncol=2)
matrix(rep(c(2, 4, 6, 8, 3), 2), nrow = 2, ncol = 2)
matrix(c(2, 4, 6, 8, 3, 5), nrow = 3, ncol = 2)
array(1:12, c(2,3,2))
x<-array(c(51, 32, 25, 45, 175, 168, 38, 59, 58, 46, 172, 161), c(2, 3, 2))
x
y<-array(c(51, 32, 25, 45, 175, 168, 38, 59, 58, 46, 172, 161), c(2, 3, 2))
dimnames(y)<-list(c("hombres, mujeres"),c("edad", "peso", "altura"), c("poblacionA", "poblacionB"))
y
dimnames(y)<-list(c("hombres, mujeres"), c("edad", "peso", "altura"), c("poblacionA", "poblacionB"))
dimnames(y)<-list(c("hombres", "mujeres"), c("edad", "peso", "altura"), c("poblacionA", "poblacionB"))
y
df <- data.frame(
"entero" = 1:4,
"factor" = c("a", "b", "c", "d"),
"numero" = c(1.2, 3.4, 4.5, 5.6),
"cadena" = as.character(c("a", "b", "c", "d"))
)
df
#creamos un vector para cada variable
edad<-c(22, 34, 29, 25, 30, 33, 31, 27, 25, 25)
tiempo<-c(14.21, 10.36, 11.89, 13.81, 12.03, 10.99, 12.48, 13.37, 12.29, 11.92)
sexo<-C("M", "H", "H", "M", "M", "H", "M", "M", "H", "H")
sexo<-C("M", "H", "H", "M", "M", "H", "M", "M", "H", "H")
sexo<-c("M", "H", "H", "M", "M", "H", "M", "M", "H", "H")
#creamos el data frame
misDatos <- data.frame(edad, tiempo, sexo)
misDatos
rownames(misDatos) <- c("Maria", "Jose", "Roberto", "Linda", "Sofia", "Juan", "Lila", "Rosa", "Lucas", "Jorge")
misDatos
mi.lista <- list("un_vector" = 1:10,
"una_matriz" = matrix(1:14, nrow = 2),
"un_df" = data.frame("num" = 1:3, "let" = c("a", "b", "c")))
mi.lista
mi.lista
mi.lista$un_df
mi.lista$un_vector
mi.lista$una_matriz
#crea un vector con 5 componentes
x <- c(1,3, 2, 10, 5)
#crea un vector de enteros consecutivos
y <- 1:5
y
x
#se le suma 2 al vector y
y+2
#se le multiplica 2 al vector y
2*y
#elevamos al cuadrado el vector y
y^2
#Se puede observar que y no ha cambiado
y
#multiplicamos el vector y por 2 y lo asignamos al objeto y
y <- y*2
#ahora si ha aisdo cambiado y
y
x+y
x*y
#Ahora se operará sobre dos vectores
x <- c(1,3, 2, 10, 5)
y <- 1:5
x+y
x*y
x/y
x^y
#suma de los elementos de x
sum(x)
#vector de suma acumulativa
cumsum(x)
#primera diferencia
diff(x)
#segunda diferencia
diff(x, 2)
#maximo
max(x)
#minimo
min(x)
#crea un vector con 5 componentes
x <- c(1,3, 2, 10, 5, 7)
x+y
#crea un vector con 5 componentes
x <- c(1,3, 2, 10, 5)
data(mtcars)
head(mtcars)
str(mtcars)
head(mtcars, 15)
mtcars[1:5, ]
mtcars[1:1, ]
mtcars[2:3, ]
mtcars[1:5, c(1,5)]
#Ver los registros del
mtcars[2:4, ]
mtcars[1:5, 2:3]
mtcars[1:5, 1:3]
mtcars[1:5, 1:5:2]
mtcars[1:5, 2:5]
mtcars[1:5, c(4, 5, 8)]
#Ver los registros del 10 al 20 y las columnas del 6 al 9
mtcars[10:20, 6:9]
#Ver los registros del 10 al 20 y las columnas del 6 al 9
mtcars[10:15, 6:9]
#Ver todas las columnas excepto la 1 y la 5
head(mtcars[, -c(1, 5)])
head(mtcars[, -1:5])
head(mtcars[, -1:-5])
#Convertirla variable hp (Horse Power) a cv (caballos de vapor)
mtcars$cv <- mtcars$hp * 0.9863
head(mtcars)
#Seleccionar aquellos autos que tiene un hp (Horse Power) superior a 150 hp
mtcars[mtcars$hp>150,]
#Seleccionar aquellos autos que tiene un hp (Horse Power) superior a 100 hp
#y con número de cilindros exactamente igual a 4
mtcars[mtcars$hp>100 & mtcars$cyl==4, ]
install.packages("dplyr")
library(dplyr)
data(mtcars)
select(mtcars, 1:3, 5)
select(mtcars, c(mpg, hp))
select(mtcars, -c(mpg, hp))
#Seleccionar variables cuyo nombre empiecen con c:
select(mtcars, starts_with("c"))
#Seleccionar variables cuyo nombre finalicen con p:
select(mtcars, ends_with("p"))
#Seleccionar variables pasadas por un vector:
vars <- c("mpg", "wt", "carb")
select(mtcars, one_of(vars))
# Seleccionar filas según una expresión lógica:
filter(mtcars, cyl==4 & hp>100)
#Seleccionar filas con cyl exactamente igual a 4 o hp mayor a 100:
filter(mtcars, cyl==6 | hp>100)
#Seleccionar filas con mpg entre 15.43 y 22.8 ambos números inclusive:
filter(mtcars, mpg>=15.43 & mpg <= 22.8)
filter(mtcars, between(mpg, 15.43, 22.8))
#Ordenar de menor a mayor según los valores de mpg:
arrange(mtcars, mpg)
#Ordenar de mayor a menor según los valores de la variable mpg:
arrange(mtcars, desc(mpg))
#Ordenar las filas de menor a mayor según los valores mpg (primero) y si hay empates se resuelve con la variable hp:
arrange(mtcars, mpg, hp)
#Cambiar el nombre de la variable hp por horse_power
rename(mtcars, horse_power = hp)
#Vamos a crear la variable hp estandarizada hp_est = (hp-mean(hp))/sd(hp):
mutate(mtcars, hp_est = (hp-mean(hp))/sd(hp))
#
by_cyl <- group_by(mtcars, cyl)
summarise(by_cyl, mean(mpg), mean(hp), n())
#Operación anidada
X <- c(1, 5, 9, 10)
round(mean(sqrt(log(X))),2
round(mean(sqrt(log(X))),2)
round(
mean(
sqrt(
log(X)
)
)
,2)
round(mean(sqrt(log(X))),2)
#Operación secuencial, con Pipe
X %>% log() %>% sqrt() %>% mean() %>% round(2)
X %>% log() %>% sqrt() %>% mean() %>% round(2)
install.packages(dplyr)
install.packages("dplyr")
library(dplyr)
#Operación secuencial, con Pipe
X %>% log() %>% sqrt() %>% mean() %>% round(2)
data(mtcars)
#Operación con R
mtcars_aux <- select(mtcars, mpg, hp, cyl, wt)
mtcars_aux <- filter(mtcars_aux, cyl != 4 & wt > 3.000)
mtcars_aux <- group_by(mtcars_aux, cyl)
mtcars_aux <- summarize(mtcars_aux, mean(hp), mean(mpg))
mtcars_aux
#Operación con Pipe
mtcars %>%
select(mpg, hp, cyl, wt) %>$%
filter(cyl != 4 & wt > 3.000) %>%
group_by(cyl) %>%
summarize(mean(hp), mean(mpg))
#Operación con Pipe
mtcars %>%
select(mpg, hp, cyl, wt) %>%
filter(cyl != 4 & wt > 3.000) %>%
group_by(cyl) %>%
summarize(mean(hp), mean(mpg))
#Instalar el paquete ggplot2
install.packages("ggplot2")
#Cargar el paquete en memoria
library(ggplot2)
data(mtcars)
#Crear contenedor
ggplot(data=mtcars, aes(x=hp, y=mpg))
#Agregar puntos
ggplot(data=mtcars, aes(x=hp, y=mpg)) + geom_point()
#Agregar nombre a los ejes y título
ggplot(data=mtcars, aes(x=hp, y=mpg)) + geom_point() + labs(x="Caballos de fuerza", y="millas por galón") + ggtitle("Gráfico de Dispersión")
#Agregar curva de tendencia con banda de confianza
ggplot(data=mtcars, aes(x=hp, y=mpg)) + geom_point() + geom_smooth() + labs(x="Caballos de fuerza", y="millas por galón") + ggtitle("Gráfico de Dispersión")
#Agregar curva de tendencia sin banda de confianza
ggplot(data=mtcars, aes(x=hp, y=mpg)) + geom_point(SE=FALSE) + geom_smooth() + labs(x="Caballos de fuerza", y="millas por galón") + ggtitle("Gráfico de Dispersión")
#Agregar curva de tendencia sin banda de confianza
ggplot(data=mtcars, aes(x=hp, y=mpg)) + geom_point() + geom_smooth(SE=FALSE) + labs(x="Caballos de fuerza", y="millas por galón") + ggtitle("Gráfico de Dispersión")
ggplot(data = mtcars, aes(x = hp, y = mpg)) +
geom_point() +
geom_smooth(method = "loess", se = FALSE) +
labs(x = "Caballos de fuerza", y = "millas por galón") +
ggtitle("Gráfico de Dispersión")
#Agregar curva de tendencia sin banda de confianza
ggplot(data = mtcars, aes(x = hp, y = mpg)) +
geom_point() +
geom_smooth(se = FALSE) +
labs(x = "Caballos de fuerza", y = "millas por galón") +
ggtitle("Gráfico de Dispersión")
#Graficar algunos estadísticos con la variable cilindrada
ggplot(data = mtcars) +
stat_summary(
mapping = aes(x = as.factor(cyl), y = mpg),
fun.min = min,
fun.max = max,
fun = median
) +
labs(x = "cilindrada", y = "millas pos galón")
# instalar paquete splitTools
install.packages("splitTools")
# cargar en memoria paquete splitTools
library(splitTools)
head(mtcars, 15)
#Dividir datos entre particiones
set.seed(3451)
inds <- partition(mtcars$mpg, p= c(train=0.6, valid=0.2, test=0.2))
#Resumen de lo que contiene la variable
str(inds)
#Seleccionamos las muestras
train <- mtcars[inds$train, ]
valid <- mtcars[inds$valid, ]
test <- mtcars[inds$test, ]
7812
inds <- partition(mtcars$mpg, p = c(train = 0.8, test = 0.2))
#Dividimos la data solo en muestras de entrenamiento y testing
set.seed(7812)
inds <- partition(mtcars$mpg, p = c(train = 0.8, test = 0.2))
train <- mtcars[inds$train, ]
test <- mtcars[inds$test, ]
train
df <- read.csv("NiniosCreativos.csv")
getwd()
setwd("D:\\Data Science UAI\\LenguajeR\\PruebasU7")
getwd()
df <- read.csv("NiniosCreativos.csv")
df <- read.csv("NiniosCreativos.csv")
# miramos los primeros 6 registros
head(df)
# miramos los primeros 6 registros
head(df)
# miramos los ultimos 6 registros
tail(df)
# miramos la estructura de los datos
str(df)
#install.packages("inspectdf")
library(inspectdf)
#install.packages("inspectdf")
library(inspectdf)
install.packages("inspectdf")
library(inspectdf)
inspect_types(df)
# verifica si hay datos faltantes por variable
inspect_na(df)
# eliminamos la primera variable
library(dplyr)
# eliminamos la primera variable
install.packages("dplyr")
install.packages("dplyr")
library(dplyr)
df <- select(df, -ObsNo.)
df<- mutate(df, Income = Income/1000)
# densidad
library(ggplot2)
ggplot(df, aes(x=Income, fill=factor(Buy))) +
geom_density(alpha=0.4)
## Separamos los datos en entrenamiemto (80%) y testing (20%)
set.seed(543219)
install.packages("caret")
library(caret)
index <- createDataPartition(df$Buy, p=0.8, list=FALSE)
df_train<- df[index,]
df_test <- df[-index,]
str(df_train)
Modelo_full
# Ajustamos el modelo
Modelo_full <- glm(Buy ~.,data = df_train, family = binomial)
Modelo_full
# verificamos si hay variables significativas
summary(Modelo_full)
modelo_full <- glm(Buy ~ .,data = df_train,family = binomial)
modelo_full
modelo_nulo <- glm(Buy ~ 1,data = df_train,family = binomial)
modelo_nulo
### Método forward:
step(modelo_nulo, scope = list(lower = modelo_nulo, upper = modelo_full), direction = "forward")
### Método Backward:
step(modelo_full, data = df_train, direction = "backward")
## Método stepwise:
step(modelo_nulo, scope = list(upper = modelo_full), data = df_train, direction = "both")
# Modelo seleccionado
modelo_sel <- glm(Buy ~ Income + IsMarried + White + IsFemale + PrevChild +
ResLength + Minors + House, family = binomial, data = df_train)
summary(modelo_sel)
