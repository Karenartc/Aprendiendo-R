X <- 2
#Para ver el valor asignado
X
print(X)
#Para borrar variables
rm(X)
X
#primeros pasos
4*5
log(4)
#primeros pasos
4*5
2^3
exp(-5)
log(4)
4*5; 2^3; exp(-5); log(4)
4*5; 2^3; exp(-5); log(4)
#Ejercicios
#50+4*5-3raízde8
20+4*5-8^(1/3)
#Ejercicios
#50+4*5-3raízde8
20+4*5-8^(1/3)
#20/3 + pi/2raízde7
20/3 + pi/sqrt(7)
#logbase5(25)+e^-2
log(25,5)+exp(-2)
#vector numérico
c(1, 20, 13, 25, 22, 7)
#vector cadena de texto
c("paga", "fuga", "deudor")
#vector lógico
c(FALSE, FALSE, TRUE, FALSE, TRUE)
#los vectores deben ser del mismo tipo
#veamos que sucede si no sucede
c(1, 4, 8, 10, "fuga")
matrix(c(2, 4, 6, 8), nrow=2, ncol=2)
matrix(c(2, 4, 6, 8, 3), nrow=2, ncol=2)
matrix(c(2, 4, 6, 8), byrow=T, ncol=2)
matrix(c(2, 4, 6, 8, 3), byrow=T, ncol=2)
matrix(rep(c(2, 4, 6, 8, 3), 2), nrow = 2, ncol = 2)
matrix(c(2, 4, 6, 8, 3, 5), nrow = 3, ncol = 2)
array(1:12, c(2,3,2))
x<-array(c(51, 32, 25, 45, 175, 168, 38, 59, 58, 46, 172, 161), c(2, 3, 2))
x
y<-array(c(51, 32, 25, 45, 175, 168, 38, 59, 58, 46, 172, 161), c(2, 3, 2))
dimnames(y)<-list(c("hombres, mujeres"),c("edad", "peso", "altura"), c("poblacionA", "poblacionB"))
y
dimnames(y)<-list(c("hombres, mujeres"), c("edad", "peso", "altura"), c("poblacionA", "poblacionB"))
dimnames(y)<-list(c("hombres", "mujeres"), c("edad", "peso", "altura"), c("poblacionA", "poblacionB"))
y
df <- data.frame(
"entero" = 1:4,
"factor" = c("a", "b", "c", "d"),
"numero" = c(1.2, 3.4, 4.5, 5.6),
"cadena" = as.character(c("a", "b", "c", "d"))
)
df
#creamos un vector para cada variable
edad<-c(22, 34, 29, 25, 30, 33, 31, 27, 25, 25)
tiempo<-c(14.21, 10.36, 11.89, 13.81, 12.03, 10.99, 12.48, 13.37, 12.29, 11.92)
sexo<-C("M", "H", "H", "M", "M", "H", "M", "M", "H", "H")
sexo<-C("M", "H", "H", "M", "M", "H", "M", "M", "H", "H")
sexo<-c("M", "H", "H", "M", "M", "H", "M", "M", "H", "H")
#creamos el data frame
misDatos <- data.frame(edad, tiempo, sexo)
misDatos
rownames(misDatos) <- c("Maria", "Jose", "Roberto", "Linda", "Sofia", "Juan", "Lila", "Rosa", "Lucas", "Jorge")
misDatos
mi.lista <- list("un_vector" = 1:10,
"una_matriz" = matrix(1:14, nrow = 2),
"un_df" = data.frame("num" = 1:3, "let" = c("a", "b", "c")))
mi.lista
mi.lista
mi.lista$un_df
mi.lista$un_vector
mi.lista$una_matriz
#crea un vector con 5 componentes
x <- c(1,3, 2, 10, 5)
#crea un vector de enteros consecutivos
y <- 1:5
y
x
#se le suma 2 al vector y
y+2
#se le multiplica 2 al vector y
2*y
#elevamos al cuadrado el vector y
y^2
#Se puede observar que y no ha cambiado
y
#multiplicamos el vector y por 2 y lo asignamos al objeto y
y <- y*2
#ahora si ha aisdo cambiado y
y
x+y
x*y
#Ahora se operará sobre dos vectores
x <- c(1,3, 2, 10, 5)
y <- 1:5
x+y
x*y
x/y
x^y
#suma de los elementos de x
sum(x)
#vector de suma acumulativa
cumsum(x)
#primera diferencia
diff(x)
#segunda diferencia
diff(x, 2)
#maximo
max(x)
#minimo
min(x)
#crea un vector con 5 componentes
x <- c(1,3, 2, 10, 5, 7)
x+y
#crea un vector con 5 componentes
x <- c(1,3, 2, 10, 5)
url <- "https://archive.ics.uci.edu/ml/machinelearning-databases/statlog/german/german.datanumeric"
download.file(url = url, destfile = "german.data")
detwd
getwd()
setwd("D:\\Data Science UAI\\LenguajeR\\PruebasU2")
url <- "https://archive.ics.uci.edu/ml/machinelearning-databases/statlog/german/german.datanumeric"
download.file(url = url, destfile = "german.data")
url <- "https://archive.ics.uci.edu/ml/machine-learning-databases/statlog/german/german.data-numeric"
download.file(url = url, destfile = "german.data")
#Leer archivos del internet
german_credit <- read.table("https://archive.ics.uci.edu/ml/machine-learning-databases/statlog/german/german.data-numeric")
head(german_credit)
#Descargar archivo y utilizar la función read.table
url <- "https://archive.ics.uci.edu/ml/machine-learning-databases/statlog/german/german.data-numeric"
prueba <- read.table(url)
head(prueba)
#Información sobre la estructura del Data Frame
str(german_credit)
#csv
my.frame <- read.csv(file="archivo_csv.csv", header=TRUE, sep=",")
#csv
my.frame <- read.csv(file="archivo_csv.csv", header=TRUE, sep=",",  fileEncoding = "UTF-8")
#csv
my.frame <- read.csv(file="archivo_csv.csv", header=FALSE, sep=",",  fileEncoding = "UTF-8")
#csv
my.frame <- read.csv(file="archivo_csv.csv", header=TRUE, sep=",",  fileEncoding = "UTF-8")
#csv
my.frame <- read.csv(file="archivo_csv.csv", header=TRUE, sep=",",  fileEncoding = "UTF-8")
#csv
my.frame <- read.csv(file="archivo_csv.csv", header=FALSE, sep=",",  fileEncoding = "UTF-8")
#csv
my.frame <- read.csv(file="archivo_csv.csv", header=FALSE, sep=",",  fileEncoding = "UTF-8")
#csv
my.frame <- read.csv(file="archivo_csv.csv", header=FALSE, sep=",",  fileEncoding = "UTF-8")
#csv
my.frame <- read.csv(file="archivo_csv.csv", header=FALSE, sep=";",  fileEncoding = "UTF-8")
#csv
my.frame <- read.csv(file="archivo_csv.csv", header=FALSE, sep=";",  fileEncoding = "UTF-8")
#csv
my.frame <- read.csv(file="csv.csv", header=FALSE, sep=",")
head(my.frame)
#xlsx
install.packages("readxl")
library(readxl)
df_excel <- read_excel (path= "archivo_xlsxl.xlsx", sheet = 1)
df_excel <- read_excel (path= "D:\\Data Science UAI\\LenguajeR\\PruebasU2\\archivo_xlsxl.xlsx", sheet = 1)
df_excel <- read_excel (path= "archivo_xlsx.xlsx", sheet = 1)
head(df_excel)
write.table(x=german_credit, file="datoexportado.txt", sep= ",", row.names=FALSE, col.names=TRUE)
#archivo csv
write.csv(x=german_credit, file="datoexportado.csv", row.names=FALSE)
